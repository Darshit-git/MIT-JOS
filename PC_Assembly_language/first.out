     1                                  
     2                                  
     3                                  ;
     4                                  ; file: first.asm
     5                                  ; First assembly program. This program asks for two integers as
     6                                  ; input and prints out their sum.
     7                                  ;
     8                                  ; To create executable:
     9                                  ; Using djgpp:
    10                                  ; nasm -f coff first.asm
    11                                  ; gcc -o first first.o driver.c asm_io.o
    12                                  ;
    13                                  ; Using Linux and gcc:
    14                                  ; nasm -f elf first.asm
    15                                  ; gcc -o first first.o driver.c asm_io.o
    16                                  ;
    17                                  ; Using Borland C/C++
    18                                  ; nasm -f obj first.asm
    19                                  ; bcc32 first.obj driver.c asm_io.obj
    20                                  ;
    21                                  ; Using MS C/C++
    22                                  ; nasm -f win32 first.asm
    23                                  ; cl first.obj driver.c asm_io.obj
    24                                  ;
    25                                  ; Using Open Watcom
    26                                  ; nasm -f obj first.asm
    27                                  ; wcl386 first.obj driver.c asm_io.obj
    28                                  
    29                                  %include "asm_io.inc"
    30                              <1> 	extern  read_int, print_int, print_string
    31                              <1> 	extern	read_char, print_char, print_nl
    32                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    33                              <1> 
    34                              <1> %macro 	dump_regs 1
    35                              <1> 	push	  dword %1
    36                              <1> 	call	  sub_dump_regs
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> 
    40                              <1> ;
    41                              <1> ; usage: dump_mem label, start-address, # paragraphs
    42                              <1> %macro  dump_mem 3
    43                              <1> 	push	 dword %1
    44                              <1> 	push	 dword %2
    45                              <1> 	push	 dword %3
    46                              <1> 	call	 sub_dump_mem
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro	dump_math 1
    50                              <1> 	push	 dword %1
    51                              <1> 	call	 sub_dump_math
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro  dump_stack 3
    55                              <1> 	push	 dword %3
    56                              <1>         push     dword %2
    57                              <1> 	push	 dword %1
    58                              <1>         call     sub_dump_stack
    59                              <1> %endmacro
    60                                  ;
    61                                  ; initialized data is put in the .data segment
    62                                  ;
    63                                  segment .data
    64                                  ;
    65                                  ; These labels refer to strings used for output
    66                                  ;
    67 00000000 456E7465722061206E-     prompt1 db    "Enter a number: ", 0       ; don't forget nul terminator
    68 00000009 756D6265723A2000   
    69 00000011 456E74657220616E6F-     prompt2 db    "Enter another number: ", 0
    70 0000001A 74686572206E756D62-
    71 00000023 65723A2000         
    72 00000028 596F7520656E746572-     outmsg1 db    "You entered ", 0
    73 00000031 65642000           
    74 00000035 20616E642000            outmsg2 db    " and ", 0
    75 0000003B 2C207468652073756D-     outmsg3 db    ", the sum of these is ", 0
    76 00000044 206F66207468657365-
    77 0000004D 2069732000         
    78                                  
    79                                  
    80                                  ;
    81                                  ; uninitialized data is put in the .bss segment
    82                                  ;
    83                                  segment .bss
    84                                  ;
    85                                  ; These labels refer to double words used to store the inputs
    86                                  ;
    87 00000000 <res 00000004>          input1  resd 1
    88 00000004 <res 00000004>          input2  resd 1
    89                                  
    90                                   
    91                                  
    92                                  ;
    93                                  ; code is put in the .text segment
    94                                  ;
    95                                  segment .text
    96                                          global  asm_main
    97                                  asm_main:
    98 00000000 C8000000                        enter   0,0               ; setup routine
    99 00000004 60                              pusha
   100                                  
   101 00000005 66B8[00000000]                  mov     eax, prompt1      ; print out prompt
   102 0000000B E8(0000)                        call    print_string
   103          ******************       error: binary output format does not support external references
   104                                  
   105 0000000E E8(0000)                        call    read_int          ; read integer
   106          ******************       error: binary output format does not support external references
   107 00000011 66A3[0000]                      mov     [input1], eax     ; store into input1
   108                                  
   109 00000015 66B8[11000000]                  mov     eax, prompt2      ; print out prompt
   110 0000001B E8(0000)                        call    print_string
   111          ******************       error: binary output format does not support external references
   112                                  
   113 0000001E E8(0000)                        call    read_int          ; read integer
   114          ******************       error: binary output format does not support external references
   115 00000021 66A3[0400]                      mov     [input2], eax     ; store into input2
   116                                  
   117 00000025 66A1[0000]                      mov     eax, [input1]     ; eax = dword at input1
   118 00000029 660306[0400]                    add     eax, [input2]     ; eax += dword at input2
   119 0000002E 6689C3                          mov     ebx, eax          ; ebx = eax
   120                                          dump_regs 1               ; dump out register values
   121 00000031 666A01              <1>  push dword %1
   122 00000034 E8(0000)            <1>  call sub_dump_regs
   123          ******************  <1>  error: binary output format does not support external references
   124                                          dump_mem 2, outmsg1, 1    ; dump out memory
   125 00000037 666A02              <1>  push dword %1
   126 0000003A 6668[28000000]      <1>  push dword %2
   127 00000040 666A01              <1>  push dword %3
   128 00000043 E8(0000)            <1>  call sub_dump_mem
   129          ******************  <1>  error: binary output format does not support external references
   130                                  ;
   131                                  ; next print out result message as series of steps
   132                                  ;
   133 00000046 66B8[28000000]                  mov     eax, outmsg1
   134 0000004C E8(0000)                        call    print_string      ; print out first message
   135          ******************       error: binary output format does not support external references
   136 0000004F 66A1[0000]                      mov     eax, [input1]     
   137 00000053 E8(0000)                        call    print_int         ; print out input1
   138          ******************       error: binary output format does not support external references
   139 00000056 66B8[35000000]                  mov     eax, outmsg2
   140 0000005C E8(0000)                        call    print_string      ; print out second message
   141          ******************       error: binary output format does not support external references
   142 0000005F 66A1[0400]                      mov     eax, [input2]
   143 00000063 E8(0000)                        call    print_int         ; print out input2
   144          ******************       error: binary output format does not support external references
   145 00000066 66B8[3B000000]                  mov     eax, outmsg3
   146 0000006C E8(0000)                        call    print_string      ; print out third message
   147          ******************       error: binary output format does not support external references
   148 0000006F 6689D8                          mov     eax, ebx
   149 00000072 E8(0000)                        call    print_int         ; print out sum (ebx)
   150          ******************       error: binary output format does not support external references
   151 00000075 E8(0000)                        call    print_nl          ; print new-line
   152          ******************       error: binary output format does not support external references
   153                                  
   154 00000078 61                              popa
   155 00000079 66B800000000                    mov     eax, 0            ; return back to C
   156 0000007F C9                              leave                     
   157 00000080 C3                              ret
   158                                  
   159                                  
